{"version":3,"sources":["components/user-search-input/user-search-input.js","components/feedback-message/feedback-message.js","components/main-view/main-view.js","App.js","index.js"],"names":["UserSearchInput","onSubmit","useState","inputValue","setInputValue","submitting","setSubmitting","handleSubmit","event","a","preventDefault","style","display","alignItems","TextField","fullWidth","required","id","label","InputProps","startAdornment","InputAdornment","position","value","onChange","target","disabled","LoadingButton","marginLeft","variant","size","loading","loadingPosition","startIcon","type","Button","FeedbackMessage","githubResponse","error","Alert","severity","Box","TableContainer","component","Paper","sx","mt","Table","TableHead","TableRow","TableCell","align","TableBody","map","parameter","defaultProps","MainView","Container","border","borderRadius","borderColor","padding","width","initialState","appState","setAppState","fetchUrl","url","fetch","response","json","message","prevState","login","name","public_repos","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5d79e9c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport { TextField, Button, InputAdornment } from \"@mui/material\";\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\n\n// UserSearchInput provides a TextField for username input.\nexport function UserSearchInput({ onSubmit }) {\n  // State variables have been declared using destructuring.\n  const [inputValue, setInputValue] = useState(\"\");\n  const [submitting, setSubmitting] = useState(false);\n\n  const handleSubmit = async (event) => {\n    // preventDefault allows React to override the default action when a form is submitted.\n    event.preventDefault();\n    setSubmitting(true);\n\n    // Await a response (i.e. promise) from the onSubmit function in App.js before proceeding.\n    await onSubmit(inputValue);\n\n    setSubmitting(false);\n    setInputValue(\"\");\n  };\n\n  // TextField is a controlled input, handleChange is called each time the input changes (i.e. as the user types).\n  const handleChange = (event) => {\n    const value = event.target.value;\n    setInputValue(value);\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      style={{ display: \"flex\", alignItems: \"center\" }}\n    >\n      {/* TextField is disabled when the form is submitting to prevent further input. */}\n      <TextField\n        fullWidth\n        required\n        id=\"outlined-required\"\n        label=\"GitHub username\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <AccountCircle />\n            </InputAdornment>\n          ),\n        }}\n        value={inputValue}\n        onChange={handleChange}\n        disabled={submitting}\n      />\n\n      {/* LoadingButton changes depending on the submitting state of the form and whether TextField is empty or not. */}\n      {submitting ? (\n        <LoadingButton\n          style={{ marginLeft: 20 }}\n          variant=\"contained\"\n          size=\"large\"\n          loading\n          loadingPosition=\"start\"\n          startIcon={<ArrowForwardIosIcon />}\n          type=\"submit\"\n        >\n          Search\n        </LoadingButton>\n      ) : (\n        <Button\n          style={{ marginLeft: 20 }}\n          variant=\"contained\"\n          size=\"large\"\n          disabled={!inputValue}\n          startIcon={<ArrowForwardIosIcon />}\n          type=\"submit\"\n        >\n          Search\n        </Button>\n      )}\n    </form>\n  );\n}\n\nUserSearchInput.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@mui/material\";\nimport Paper from \"@mui/material/Paper\";\nimport Alert from \"@mui/material/Alert\";\nimport Box from \"@mui/material/Box\";\n\n// FeedbackMessage presents a response to the user depending on the current state of the App.\nexport function FeedbackMessage({ submitting, githubResponse, error }) {\n  if (error) {\n    return (\n      <Alert severity=\"error\">\n        There was an error. Please check your input and try again.\n      </Alert>\n    );\n  } else if (submitting) {\n    return <Alert severity=\"warning\">Please wait.</Alert>;\n  } else if (githubResponse) {\n    // The username entered is confirmed in the response message.\n    // The table data uses a unique key, this is to help React identify where items change.\n    return (\n      <Box>\n        <Alert severity=\"success\">\n          The username &quot;{githubResponse[0].value}&quot; was found.\n        </Alert>\n        <TableContainer component={Paper} sx={{ mt: 2 }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"left\">\n                  <b>Parameter</b>\n                </TableCell>\n                <TableCell align=\"left\">\n                  <b>Data</b>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {githubResponse.map(({ label: parameter, value }) => (\n                <TableRow key={parameter}>\n                  <TableCell>{parameter}</TableCell>\n                  <TableCell>{value}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Box>\n    );\n  } else {\n    // This is the initial message shown when the App is first accessed.\n    return <Alert severity=\"info\">Your results will appear below.</Alert>;\n  }\n}\n\nFeedbackMessage.propTypes = {\n  submitting: PropTypes.bool,\n  githubResponse: PropTypes.array,\n  error: PropTypes.bool,\n};\n\nFeedbackMessage.defaultProps = {\n  submitting: false,\n  error: false,\n};\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport { UserSearchInput } from \"../user-search-input\";\nimport { FeedbackMessage } from \"../feedback-message\";\nimport Container from \"@mui/material/Container\";\nimport Box from \"@mui/material/Box\";\n\n// MainView is a wrapper for the App's subcomponents, it presents the App in its complete form.\nexport function MainView({ onSubmit, submitting, githubResponse, error }) {\n  return (\n    <Container\n      sx={{\n        border: 2,\n        borderRadius: 2,\n        borderColor: \"text.disabled\",\n        padding: 2,\n        width: 600,\n      }}\n    >\n      <Box>\n        <UserSearchInput onSubmit={onSubmit} />\n      </Box>\n      <Box sx={{ mt: 2 }}>\n        <FeedbackMessage\n          submitting={submitting}\n          githubResponse={githubResponse}\n          error={error}\n        />\n      </Box>\n    </Container>\n  );\n}\n\nMainView.propTypes = {\n  onSubmit: PropTypes.func,\n  submitting: PropTypes.bool,\n  githubResponse: PropTypes.array,\n  error: PropTypes.bool,\n};\n","import React, { useState } from \"react\";\nimport { MainView } from \"./components/main-view\";\n\n// initialState is declared as an object.\n// This approach provides a clear reference for the default states and an easy means to apply the default state to the variables in one action (see appState declaration, for example).\nconst initialState = {\n  submitting: false,\n  githubResponse: null,\n  error: false,\n};\n\n// Container provides the main logic that drives the app.\nexport function Container() {\n  const [appState, setAppState] = useState({\n    ...initialState,\n  });\n\n  // The url is fetched asynchronously, try and catch are used to return a response depending on the success/failure of the fetch operation.\n  const fetchUrl = async (url) => {\n    try {\n      const response = await fetch(url);\n      const json = await response.json();\n      if (json.message == \"Not Found\") {\n        throw true; // Triggers the catch statement below.\n      } else {\n        // prevState returns the App's state as at the last DOM refresh.\n        // The arguments of prevState are spread-in, but only submitting and gitHubResponse are further updated in this else statement.\n        setAppState((prevState) => ({\n          ...prevState,\n          submitting: false,\n          githubResponse: [\n            {\n              label: \"Username\",\n              value: json.login ?? <em>No data</em>,\n            },\n            {\n              label: \"Name\",\n              value: json.name ?? <em>No data</em>,\n            },\n            {\n              label: \"No. of public repos\",\n              value: json.public_repos ?? <em>No data</em>,\n            },\n          ],\n        }));\n      }\n    } catch (e) {\n      // appState is reset to its default values, and then the error object updated to true.\n      setAppState({\n        ...initialState,\n        error: e,\n      });\n    }\n  };\n\n  const onSubmit = async (value) => {\n    // Check whether the form is in a submitting state, return if true so no further processing occurs\n    if (appState.submitting) return;\n    // appState is changed when the form is submitted: submitting is set to true and the error state reset for the current request.\n    setAppState((prevState) => ({\n      ...prevState,\n      submitting: true,\n      error: false,\n    }));\n    const url = `https://api.github.com/users/${value}`;\n    await fetchUrl(url); // Await the response (i.e. promise) of the fetchUrl function before proceeding.\n  };\n\n  return (\n    // MainView is called and the required variables passed for control of the subcomponents.\n    <MainView\n      onSubmit={onSubmit}\n      submitting={appState.submitting}\n      githubResponse={appState.githubResponse}\n      error={appState.error}\n    />\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Container } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Container />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}